
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA DIV DIVIDE DO DOT DOTDOT DOWNTO ELSE END EQUAL FALSE FOR FUNCTION GREATEREQUAL GREATERTHAN ID IF INTEGER INTEGER_CONST LBRACKET LESSEQUAL LESSTHAN LPAREN MINUS MOD NOT NOTEQUAL OF OR PLUS PROCEDURE PROGRAM RBRACKET READ READLN REAL_CONST RPAREN SEMICOLON STRING STRING_CONST THEN TIMES TO TRUE VAR WHILE WRITE WRITELNprogram : PROGRAM ID SEMICOLON program_block DOTblock : declarations compound_statementprogram_block : function_declarations declarations compound_statement\n| declarations compound_statementdeclarations : VAR declaration_list\n| emptydeclaration_list : declaration_list declaration\n| declarationdeclaration : id_list COLON type SEMICOLONfunction_declarations : function_declarationfunction_declaration : FUNCTION ID formal_parameters COLON type SEMICOLON block SEMICOLONformal_parameters : LPAREN parameter_list RPAREN\n| LPAREN RPARENparameter_list : parameterparameter : id_list COLON typeid_list : id_list COMMA ID\n| IDtype : INTEGER\n| BOOLEAN\n| STRING\n| array_typearray_type : ARRAY LBRACKET INTEGER_CONST DOTDOT INTEGER_CONST RBRACKET OF typecompound_statement : BEGIN statement_list ENDstatement_list : statement_list SEMICOLON statement\n| statementstatement : assignment_statement\n| if_statement\n| while_statement\n| for_statement\n| procedure_call\n| compound_statement\n| emptyassignment_statement : variable ASSIGN expressionif_statement : IF expression THEN statement\n| IF expression THEN statement ELSE statementwhile_statement : WHILE expression DO statementfor_statement : FOR ID ASSIGN expression TO expression DO statement\n| FOR ID ASSIGN expression DOWNTO expression DO statementprocedure_call : ID LPAREN expression_list RPAREN\n| ID LPAREN RPAREN\n| WRITELN LPAREN expression_list RPAREN\n| WRITELN LPAREN RPAREN\n| WRITE LPAREN expression_list RPAREN\n| WRITE LPAREN RPAREN\n| READLN LPAREN variable_list RPAREN\n| READLN LPAREN RPAREN\n| READ LPAREN variable_list RPAREN\n| READ LPAREN RPARENexpression_list : expression_list COMMA expression\n| expressionvariable_list : variable_list COMMA variable\n| variableexpression : simple_expression\n| simple_expression relational_operator simple_expressionrelational_operator : EQUAL\n| NOTEQUAL\n| LESSTHAN\n| LESSEQUAL\n| GREATERTHAN\n| GREATEREQUALsimple_expression : term\n| simple_expression additive_operator termadditive_operator : PLUS\n| MINUSterm : factor\n| term multiplicative_operator factormultiplicative_operator : TIMES\n| DIVIDE\n| DIV\n| MOD\n| ANDexpression : expression AND expression\n| expression OR expression  \n| NOT expressionfactor : variable\n| INTEGER_CONST\n| REAL_CONST\n| STRING_CONST\n| LPAREN expression RPAREN\n| function_call\n| TRUE\n| FALSEfunction_call : ID LPAREN expression_list RPAREN\n| ID LPAREN RPARENvariable : ID\n| ID LBRACKET expression RBRACKETempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,12,],[0,-1,]),'ID':([2,9,11,15,16,17,32,33,34,40,42,44,46,47,50,57,64,65,66,67,68,69,84,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,122,139,144,149,151,152,164,165,],[3,19,20,35,19,-8,61,61,63,-7,76,19,35,61,61,61,61,61,61,61,119,119,35,61,61,61,61,-55,-56,-57,-58,-59,-60,-63,-64,61,-67,-68,-69,-70,-71,61,35,61,-9,61,119,35,61,61,35,35,]),'SEMICOLON':([3,15,22,23,24,25,26,27,28,29,30,45,46,49,51,52,53,54,55,56,58,59,60,61,70,71,72,73,74,82,83,84,97,106,109,113,115,117,121,124,127,128,129,130,131,132,133,135,136,138,140,141,142,143,145,149,150,156,158,163,164,165,167,168,170,],[4,-87,46,-25,-26,-27,-28,-29,-30,-31,-32,-23,-87,-53,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,122,-18,-19,-20,-21,-24,-33,-87,-74,-87,-40,-42,-44,-46,-48,147,-34,-72,-73,-54,-62,-66,-79,-84,-36,-39,-86,-41,-43,-45,-47,-87,-83,162,-35,-2,-87,-87,-37,-38,-22,]),'VAR':([4,6,8,147,162,],[9,9,-10,9,-11,]),'FUNCTION':([4,],[11,]),'BEGIN':([4,6,7,8,10,13,15,16,17,40,46,84,106,122,147,149,157,162,164,165,],[-87,-87,15,-10,-6,15,15,-5,-8,-7,15,15,15,-9,-87,15,15,-11,15,15,]),'DOT':([5,14,21,45,],[12,-4,-3,-23,]),'IF':([15,46,84,106,149,164,165,],[32,32,32,32,32,32,32,]),'WHILE':([15,46,84,106,149,164,165,],[33,33,33,33,33,33,33,]),'FOR':([15,46,84,106,149,164,165,],[34,34,34,34,34,34,34,]),'WRITELN':([15,46,84,106,149,164,165,],[36,36,36,36,36,36,36,]),'WRITE':([15,46,84,106,149,164,165,],[37,37,37,37,37,37,37,]),'READLN':([15,46,84,106,149,164,165,],[38,38,38,38,38,38,38,]),'READ':([15,46,84,106,149,164,165,],[39,39,39,39,39,39,39,]),'END':([15,22,23,24,25,26,27,28,29,30,45,46,49,51,52,53,54,55,56,58,59,60,61,82,83,84,97,106,109,113,115,117,121,127,128,129,130,131,132,133,135,136,138,140,141,142,143,145,149,150,158,164,165,167,168,],[-87,45,-25,-26,-27,-28,-29,-30,-31,-32,-23,-87,-53,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-24,-33,-87,-74,-87,-40,-42,-44,-46,-48,-34,-72,-73,-54,-62,-66,-79,-84,-36,-39,-86,-41,-43,-45,-47,-87,-83,-35,-87,-87,-37,-38,]),'COLON':([18,19,43,76,79,81,125,],[41,-17,77,-16,-13,126,-12,]),'COMMA':([18,19,49,51,52,53,54,55,56,58,59,60,61,76,81,97,108,110,112,114,116,118,119,120,128,129,130,131,132,133,134,135,140,150,153,154,],[42,-17,-53,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-16,42,-74,139,-50,139,139,144,-52,-85,144,-72,-73,-54,-62,-66,-79,139,-84,-86,-83,-49,-51,]),'LPAREN':([20,32,33,35,36,37,38,39,47,50,57,61,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,107,139,151,152,],[44,57,57,64,66,67,68,69,57,57,57,105,57,57,57,57,57,57,57,57,-55,-56,-57,-58,-59,-60,-63,-64,57,-67,-68,-69,-70,-71,57,57,57,57,57,]),'ELSE':([24,25,26,27,28,29,30,45,49,51,52,53,54,55,56,58,59,60,61,83,84,97,106,109,113,115,117,121,127,128,129,130,131,132,133,135,136,138,140,141,142,143,145,149,150,158,164,165,167,168,],[-26,-27,-28,-29,-30,-31,-32,-23,-53,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-33,-87,-74,-87,-40,-42,-44,-46,-48,149,-72,-73,-54,-62,-66,-79,-84,-36,-39,-86,-41,-43,-45,-47,-87,-83,-35,-87,-87,-37,-38,]),'ASSIGN':([31,35,63,140,],[47,-85,107,-86,]),'NOT':([32,33,47,50,57,64,65,66,67,85,86,105,107,139,151,152,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'INTEGER_CONST':([32,33,47,50,57,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,107,123,139,151,152,155,],[54,54,54,54,54,54,54,54,54,54,54,54,54,-55,-56,-57,-58,-59,-60,-63,-64,54,-67,-68,-69,-70,-71,54,54,146,54,54,54,161,]),'REAL_CONST':([32,33,47,50,57,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,107,139,151,152,],[55,55,55,55,55,55,55,55,55,55,55,55,55,-55,-56,-57,-58,-59,-60,-63,-64,55,-67,-68,-69,-70,-71,55,55,55,55,55,]),'STRING_CONST':([32,33,47,50,57,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,107,139,151,152,],[56,56,56,56,56,56,56,56,56,56,56,56,56,-55,-56,-57,-58,-59,-60,-63,-64,56,-67,-68,-69,-70,-71,56,56,56,56,56,]),'TRUE':([32,33,47,50,57,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,107,139,151,152,],[59,59,59,59,59,59,59,59,59,59,59,59,59,-55,-56,-57,-58,-59,-60,-63,-64,59,-67,-68,-69,-70,-71,59,59,59,59,59,]),'FALSE':([32,33,47,50,57,64,65,66,67,85,86,87,88,89,90,91,92,93,94,95,96,98,99,100,101,102,103,105,107,139,151,152,],[60,60,60,60,60,60,60,60,60,60,60,60,60,-55,-56,-57,-58,-59,-60,-63,-64,60,-67,-68,-69,-70,-71,60,60,60,60,60,]),'LBRACKET':([35,61,75,119,],[65,65,123,65,]),'INTEGER':([41,77,126,169,],[71,71,71,71,]),'BOOLEAN':([41,77,126,169,],[72,72,72,72,]),'STRING':([41,77,126,169,],[73,73,73,73,]),'ARRAY':([41,77,126,169,],[75,75,75,75,]),'RPAREN':([44,49,51,52,53,54,55,56,58,59,60,61,64,66,67,68,69,71,72,73,74,78,80,97,104,105,108,110,112,114,116,118,119,120,128,129,130,131,132,133,134,135,140,148,150,153,154,170,],[79,-53,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,109,113,115,117,121,-18,-19,-20,-21,125,-14,-74,133,135,138,-50,141,142,143,-52,-85,145,-72,-73,-54,-62,-66,-79,150,-84,-86,-15,-83,-49,-51,-22,]),'THEN':([48,49,51,52,53,54,55,56,58,59,60,61,97,128,129,130,131,132,133,135,140,150,],[84,-53,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-74,-72,-73,-54,-62,-66,-79,-84,-86,-83,]),'AND':([48,49,51,52,53,54,55,56,58,59,60,61,62,83,97,104,110,111,128,129,130,131,132,133,135,137,140,150,153,159,160,],[85,-53,103,-65,-75,-76,-77,-78,-80,-81,-82,-85,85,85,85,85,85,85,85,85,-54,103,-66,-79,-84,85,-86,-83,85,85,85,]),'OR':([48,49,51,52,53,54,55,56,58,59,60,61,62,83,97,104,110,111,128,129,130,131,132,133,135,137,140,150,153,159,160,],[86,-53,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,86,86,86,86,86,86,86,86,-54,-62,-66,-79,-84,86,-86,-83,86,86,86,]),'DO':([49,51,52,53,54,55,56,58,59,60,61,62,97,128,129,130,131,132,133,135,140,150,159,160,],[-53,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,106,-74,-72,-73,-54,-62,-66,-79,-84,-86,-83,164,165,]),'RBRACKET':([49,51,52,53,54,55,56,58,59,60,61,97,111,128,129,130,131,132,133,135,140,150,161,],[-53,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-74,140,-72,-73,-54,-62,-66,-79,-84,-86,-83,166,]),'TO':([49,51,52,53,54,55,56,58,59,60,61,97,128,129,130,131,132,133,135,137,140,150,],[-53,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-74,-72,-73,-54,-62,-66,-79,-84,151,-86,-83,]),'DOWNTO':([49,51,52,53,54,55,56,58,59,60,61,97,128,129,130,131,132,133,135,137,140,150,],[-53,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-74,-72,-73,-54,-62,-66,-79,-84,152,-86,-83,]),'EQUAL':([49,51,52,53,54,55,56,58,59,60,61,131,132,133,135,140,150,],[89,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-62,-66,-79,-84,-86,-83,]),'NOTEQUAL':([49,51,52,53,54,55,56,58,59,60,61,131,132,133,135,140,150,],[90,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-62,-66,-79,-84,-86,-83,]),'LESSTHAN':([49,51,52,53,54,55,56,58,59,60,61,131,132,133,135,140,150,],[91,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-62,-66,-79,-84,-86,-83,]),'LESSEQUAL':([49,51,52,53,54,55,56,58,59,60,61,131,132,133,135,140,150,],[92,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-62,-66,-79,-84,-86,-83,]),'GREATERTHAN':([49,51,52,53,54,55,56,58,59,60,61,131,132,133,135,140,150,],[93,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-62,-66,-79,-84,-86,-83,]),'GREATEREQUAL':([49,51,52,53,54,55,56,58,59,60,61,131,132,133,135,140,150,],[94,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,-62,-66,-79,-84,-86,-83,]),'PLUS':([49,51,52,53,54,55,56,58,59,60,61,130,131,132,133,135,140,150,],[95,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,95,-62,-66,-79,-84,-86,-83,]),'MINUS':([49,51,52,53,54,55,56,58,59,60,61,130,131,132,133,135,140,150,],[96,-61,-65,-75,-76,-77,-78,-80,-81,-82,-85,96,-62,-66,-79,-84,-86,-83,]),'TIMES':([51,52,53,54,55,56,58,59,60,61,131,132,133,135,140,150,],[99,-65,-75,-76,-77,-78,-80,-81,-82,-85,99,-66,-79,-84,-86,-83,]),'DIVIDE':([51,52,53,54,55,56,58,59,60,61,131,132,133,135,140,150,],[100,-65,-75,-76,-77,-78,-80,-81,-82,-85,100,-66,-79,-84,-86,-83,]),'DIV':([51,52,53,54,55,56,58,59,60,61,131,132,133,135,140,150,],[101,-65,-75,-76,-77,-78,-80,-81,-82,-85,101,-66,-79,-84,-86,-83,]),'MOD':([51,52,53,54,55,56,58,59,60,61,131,132,133,135,140,150,],[102,-65,-75,-76,-77,-78,-80,-81,-82,-85,102,-66,-79,-84,-86,-83,]),'DOTDOT':([146,],[155,]),'OF':([166,],[169,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'program_block':([4,],[5,]),'function_declarations':([4,],[6,]),'declarations':([4,6,147,],[7,13,157,]),'function_declaration':([4,],[8,]),'empty':([4,6,15,46,84,106,147,149,164,165,],[10,10,30,30,30,30,10,30,30,30,]),'compound_statement':([7,13,15,46,84,106,149,157,164,165,],[14,21,29,29,29,29,29,163,29,29,]),'declaration_list':([9,],[16,]),'declaration':([9,16,],[17,40,]),'id_list':([9,16,44,],[18,18,81,]),'statement_list':([15,],[22,]),'statement':([15,46,84,106,149,164,165,],[23,82,127,136,158,167,168,]),'assignment_statement':([15,46,84,106,149,164,165,],[24,24,24,24,24,24,24,]),'if_statement':([15,46,84,106,149,164,165,],[25,25,25,25,25,25,25,]),'while_statement':([15,46,84,106,149,164,165,],[26,26,26,26,26,26,26,]),'for_statement':([15,46,84,106,149,164,165,],[27,27,27,27,27,27,27,]),'procedure_call':([15,46,84,106,149,164,165,],[28,28,28,28,28,28,28,]),'variable':([15,32,33,46,47,50,57,64,65,66,67,68,69,84,85,86,87,88,98,105,106,107,139,144,149,151,152,164,165,],[31,53,53,31,53,53,53,53,53,53,53,118,118,31,53,53,53,53,53,53,31,53,53,154,31,53,53,31,31,]),'formal_parameters':([20,],[43,]),'expression':([32,33,47,50,57,64,65,66,67,85,86,105,107,139,151,152,],[48,62,83,97,104,110,111,110,110,128,129,110,137,153,159,160,]),'simple_expression':([32,33,47,50,57,64,65,66,67,85,86,87,105,107,139,151,152,],[49,49,49,49,49,49,49,49,49,49,49,130,49,49,49,49,49,]),'term':([32,33,47,50,57,64,65,66,67,85,86,87,88,105,107,139,151,152,],[51,51,51,51,51,51,51,51,51,51,51,51,131,51,51,51,51,51,]),'factor':([32,33,47,50,57,64,65,66,67,85,86,87,88,98,105,107,139,151,152,],[52,52,52,52,52,52,52,52,52,52,52,52,52,132,52,52,52,52,52,]),'function_call':([32,33,47,50,57,64,65,66,67,85,86,87,88,98,105,107,139,151,152,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'type':([41,77,126,169,],[70,124,148,170,]),'array_type':([41,77,126,169,],[74,74,74,74,]),'parameter_list':([44,],[78,]),'parameter':([44,],[80,]),'relational_operator':([49,],[87,]),'additive_operator':([49,130,],[88,88,]),'multiplicative_operator':([51,131,],[98,98,]),'expression_list':([64,66,67,105,],[108,112,114,134,]),'variable_list':([68,69,],[116,120,]),'block':([147,],[156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON program_block DOT','program',5,'p_program','parser.py',51),
  ('block -> declarations compound_statement','block',2,'p_block','parser.py',55),
  ('program_block -> function_declarations declarations compound_statement','program_block',3,'p_program_block','parser.py',59),
  ('program_block -> declarations compound_statement','program_block',2,'p_program_block','parser.py',60),
  ('declarations -> VAR declaration_list','declarations',2,'p_declarations','parser.py',67),
  ('declarations -> empty','declarations',1,'p_declarations','parser.py',68),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',75),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',76),
  ('declaration -> id_list COLON type SEMICOLON','declaration',4,'p_declaration','parser.py',90),
  ('function_declarations -> function_declaration','function_declarations',1,'p_function_declarations','parser.py',104),
  ('function_declaration -> FUNCTION ID formal_parameters COLON type SEMICOLON block SEMICOLON','function_declaration',8,'p_function_declaration','parser.py',108),
  ('formal_parameters -> LPAREN parameter_list RPAREN','formal_parameters',3,'p_formal_parameters','parser.py',112),
  ('formal_parameters -> LPAREN RPAREN','formal_parameters',2,'p_formal_parameters','parser.py',113),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','parser.py',120),
  ('parameter -> id_list COLON type','parameter',3,'p_parameter','parser.py',124),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','parser.py',128),
  ('id_list -> ID','id_list',1,'p_id_list','parser.py',129),
  ('type -> INTEGER','type',1,'p_type','parser.py',141),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',142),
  ('type -> STRING','type',1,'p_type','parser.py',143),
  ('type -> array_type','type',1,'p_type','parser.py',144),
  ('array_type -> ARRAY LBRACKET INTEGER_CONST DOTDOT INTEGER_CONST RBRACKET OF type','array_type',8,'p_array_type','parser.py',152),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compound_statement','parser.py',160),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list','parser.py',164),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',165),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',181),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',182),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',183),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',184),
  ('statement -> procedure_call','statement',1,'p_statement','parser.py',185),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',186),
  ('statement -> empty','statement',1,'p_statement','parser.py',187),
  ('assignment_statement -> variable ASSIGN expression','assignment_statement',3,'p_assignment_statement','parser.py',191),
  ('if_statement -> IF expression THEN statement','if_statement',4,'p_if_statement','parser.py',201),
  ('if_statement -> IF expression THEN statement ELSE statement','if_statement',6,'p_if_statement','parser.py',202),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','parser.py',217),
  ('for_statement -> FOR ID ASSIGN expression TO expression DO statement','for_statement',8,'p_for_statement','parser.py',227),
  ('for_statement -> FOR ID ASSIGN expression DOWNTO expression DO statement','for_statement',8,'p_for_statement','parser.py',228),
  ('procedure_call -> ID LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',241),
  ('procedure_call -> ID LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',242),
  ('procedure_call -> WRITELN LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',243),
  ('procedure_call -> WRITELN LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',244),
  ('procedure_call -> WRITE LPAREN expression_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',245),
  ('procedure_call -> WRITE LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',246),
  ('procedure_call -> READLN LPAREN variable_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',247),
  ('procedure_call -> READLN LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',248),
  ('procedure_call -> READ LPAREN variable_list RPAREN','procedure_call',4,'p_procedure_call','parser.py',249),
  ('procedure_call -> READ LPAREN RPAREN','procedure_call',3,'p_procedure_call','parser.py',250),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',270),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',271),
  ('variable_list -> variable_list COMMA variable','variable_list',3,'p_variable_list','parser.py',288),
  ('variable_list -> variable','variable_list',1,'p_variable_list','parser.py',289),
  ('expression -> simple_expression','expression',1,'p_expression','parser.py',306),
  ('expression -> simple_expression relational_operator simple_expression','expression',3,'p_expression','parser.py',307),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','parser.py',320),
  ('relational_operator -> NOTEQUAL','relational_operator',1,'p_relational_operator','parser.py',321),
  ('relational_operator -> LESSTHAN','relational_operator',1,'p_relational_operator','parser.py',322),
  ('relational_operator -> LESSEQUAL','relational_operator',1,'p_relational_operator','parser.py',323),
  ('relational_operator -> GREATERTHAN','relational_operator',1,'p_relational_operator','parser.py',324),
  ('relational_operator -> GREATEREQUAL','relational_operator',1,'p_relational_operator','parser.py',325),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','parser.py',329),
  ('simple_expression -> simple_expression additive_operator term','simple_expression',3,'p_simple_expression','parser.py',330),
  ('additive_operator -> PLUS','additive_operator',1,'p_additive_operator','parser.py',343),
  ('additive_operator -> MINUS','additive_operator',1,'p_additive_operator','parser.py',344),
  ('term -> factor','term',1,'p_term','parser.py',348),
  ('term -> term multiplicative_operator factor','term',3,'p_term','parser.py',349),
  ('multiplicative_operator -> TIMES','multiplicative_operator',1,'p_multiplicative_operator','parser.py',361),
  ('multiplicative_operator -> DIVIDE','multiplicative_operator',1,'p_multiplicative_operator','parser.py',362),
  ('multiplicative_operator -> DIV','multiplicative_operator',1,'p_multiplicative_operator','parser.py',363),
  ('multiplicative_operator -> MOD','multiplicative_operator',1,'p_multiplicative_operator','parser.py',364),
  ('multiplicative_operator -> AND','multiplicative_operator',1,'p_multiplicative_operator','parser.py',365),
  ('expression -> expression AND expression','expression',3,'p_logical_expression','parser.py',369),
  ('expression -> expression OR expression','expression',3,'p_logical_expression','parser.py',370),
  ('expression -> NOT expression','expression',2,'p_logical_expression','parser.py',371),
  ('factor -> variable','factor',1,'p_factor','parser.py',375),
  ('factor -> INTEGER_CONST','factor',1,'p_factor','parser.py',376),
  ('factor -> REAL_CONST','factor',1,'p_factor','parser.py',377),
  ('factor -> STRING_CONST','factor',1,'p_factor','parser.py',378),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',379),
  ('factor -> function_call','factor',1,'p_factor','parser.py',380),
  ('factor -> TRUE','factor',1,'p_factor','parser.py',381),
  ('factor -> FALSE','factor',1,'p_factor','parser.py',382),
  ('function_call -> ID LPAREN expression_list RPAREN','function_call',4,'p_function_call','parser.py',406),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','parser.py',407),
  ('variable -> ID','variable',1,'p_variable','parser.py',417),
  ('variable -> ID LBRACKET expression RBRACKET','variable',4,'p_variable','parser.py',418),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',428),
]
